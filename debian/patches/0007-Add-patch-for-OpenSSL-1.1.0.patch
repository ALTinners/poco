From: Jochen Sprickerhof <git@jochen.sprickerhof.de>
Date: Mon, 31 Oct 2016 08:12:27 +0100
Subject: Add patch for OpenSSL 1.1.0

taken from https://github.com/pocoproject/poco/issues/1376
---
 Crypto/src/CipherImpl.cpp      | 15 ++++++++-------
 Crypto/src/DigestEngine.cpp    |  5 +++--
 Crypto/src/RSAKeyImpl.cpp      | 18 +++++++++++++++---
 Crypto/src/X509Certificate.cpp |  2 +-
 NetSSL_OpenSSL/src/Context.cpp |  9 +++++----
 5 files changed, 32 insertions(+), 17 deletions(-)

diff --git a/Crypto/src/CipherImpl.cpp b/Crypto/src/CipherImpl.cpp
index b115ede..b4fd8e6 100644
--- a/Crypto/src/CipherImpl.cpp
+++ b/Crypto/src/CipherImpl.cpp
@@ -77,7 +77,7 @@ namespace
 
 	private:
 		const EVP_CIPHER* _pCipher;
-		EVP_CIPHER_CTX    _ctx;
+		EVP_CIPHER_CTX    *_ctx;
 		ByteVec           _key;
 		ByteVec           _iv;
 	};
@@ -92,8 +92,9 @@ namespace
 		_key(key),
 		_iv(iv)
 	{
+		_ctx = EVP_CIPHER_CTX_new();
 		EVP_CipherInit(
-			&_ctx,
+			_ctx,
 			_pCipher,
 			&_key[0],
 			_iv.empty() ? 0 : &_iv[0],
@@ -103,19 +104,19 @@ namespace
 
 	CryptoTransformImpl::~CryptoTransformImpl()
 	{
-		EVP_CIPHER_CTX_cleanup(&_ctx);
+		EVP_CIPHER_CTX_cleanup(_ctx);
 	}
 
 
 	std::size_t CryptoTransformImpl::blockSize() const
 	{
-		return EVP_CIPHER_CTX_block_size(&_ctx);
+		return EVP_CIPHER_CTX_block_size(_ctx);
 	}
 
 	
 	int CryptoTransformImpl::setPadding(int padding)
 	{
-		return EVP_CIPHER_CTX_set_padding(&_ctx, padding);
+		return EVP_CIPHER_CTX_set_padding(_ctx, padding);
 	}
 	
 
@@ -129,7 +130,7 @@ namespace
 
 		int outLen = static_cast<int>(outputLength);
 		int rc = EVP_CipherUpdate(
-			&_ctx,
+			_ctx,
 			output,
 			&outLen,
 			input,
@@ -153,7 +154,7 @@ namespace
 		// Use the '_ex' version that does not perform implicit cleanup since we
 		// will call EVP_CIPHER_CTX_cleanup() from the dtor as there is no
 		// guarantee that finalize() will be called if an error occurred.
-		int rc = EVP_CipherFinal_ex(&_ctx, output, &len);
+		int rc = EVP_CipherFinal_ex(_ctx, output, &len);
 
 		if (rc == 0)
 			throwError();
diff --git a/Crypto/src/DigestEngine.cpp b/Crypto/src/DigestEngine.cpp
index 6e574ab..6af24da 100644
--- a/Crypto/src/DigestEngine.cpp
+++ b/Crypto/src/DigestEngine.cpp
@@ -39,7 +39,7 @@ DigestEngine::~DigestEngine()
 
 int DigestEngine::nid() const
 {
-	return EVP_MD_nid(_ctx->digest);
+	return EVP_MD_nid(EVP_MD_CTX_md(_ctx));
 }
 
 std::size_t DigestEngine::digestLength() const
@@ -50,7 +50,8 @@ std::size_t DigestEngine::digestLength() const
 
 void DigestEngine::reset()
 {
-	EVP_MD_CTX_cleanup(_ctx);
+	EVP_MD_CTX_free(_ctx);
+	_ctx = EVP_MD_CTX_create();
 	const EVP_MD* md = EVP_get_digestbyname(_name.c_str());
 	if (!md) throw Poco::NotFoundException(_name);
 	EVP_DigestInit_ex(_ctx, md, NULL);
diff --git a/Crypto/src/RSAKeyImpl.cpp b/Crypto/src/RSAKeyImpl.cpp
index 8333453..2cae9e6 100644
--- a/Crypto/src/RSAKeyImpl.cpp
+++ b/Crypto/src/RSAKeyImpl.cpp
@@ -207,19 +207,31 @@ int RSAKeyImpl::size() const
 
 RSAKeyImpl::ByteVec RSAKeyImpl::modulus() const
 {
-	return convertToByteVec(_pRSA->n);
+	const BIGNUM *n = 0;
+	const BIGNUM *e = 0;
+	const BIGNUM *d = 0;
+	RSA_get0_key(_pRSA, &n, &e, &d);
+	return convertToByteVec(n);
 }
 
 
 RSAKeyImpl::ByteVec RSAKeyImpl::encryptionExponent() const
 {
-	return convertToByteVec(_pRSA->e);
+	const BIGNUM *n = 0;
+	const BIGNUM *e = 0;
+	const BIGNUM *d = 0;
+	RSA_get0_key(_pRSA, &n, &e, &d);
+	return convertToByteVec(e);
 }
 
 
 RSAKeyImpl::ByteVec RSAKeyImpl::decryptionExponent() const
 {
-	return convertToByteVec(_pRSA->d);
+	const BIGNUM *n = 0;
+	const BIGNUM *e = 0;
+	const BIGNUM *d = 0;
+	RSA_get0_key(_pRSA, &n, &e, &d);
+	return convertToByteVec(d);
 }
 
 
diff --git a/Crypto/src/X509Certificate.cpp b/Crypto/src/X509Certificate.cpp
index a56cc10..5ad3263 100644
--- a/Crypto/src/X509Certificate.cpp
+++ b/Crypto/src/X509Certificate.cpp
@@ -59,7 +59,7 @@ X509Certificate::X509Certificate(X509* pCert, bool shared):
 	
 	if (shared)
 	{
-		_pCert->references++;
+		X509_up_ref(_pCert);
 	}
 
 	init();
diff --git a/NetSSL_OpenSSL/src/Context.cpp b/NetSSL_OpenSSL/src/Context.cpp
index aa5e314..744e846 100644
--- a/NetSSL_OpenSSL/src/Context.cpp
+++ b/NetSSL_OpenSSL/src/Context.cpp
@@ -494,10 +494,11 @@ void Context::initDH(const std::string& dhParamsFile)
 			std::string msg = Utility::getLastError();
 			throw SSLContextException("Error creating Diffie-Hellman parameters", msg);
 		}
-		dh->p = BN_bin2bn(dh1024_p, sizeof(dh1024_p), 0);
-		dh->g = BN_bin2bn(dh1024_g, sizeof(dh1024_g), 0);
-		dh->length = 160;
-		if ((!dh->p) || (!dh->g)) 
+		BIGNUM *p = BN_bin2bn(dh1024_p, sizeof(dh1024_p), 0);
+		BIGNUM *g = BN_bin2bn(dh1024_g, sizeof(dh1024_g), 0);
+		DH_set0_pqg(dh, p, 0, g);
+		DH_set_length(dh, 160);
+		if ((!p) || (!g))
 		{
 			DH_free(dh);
 			throw SSLContextException("Error creating Diffie-Hellman parameters");
